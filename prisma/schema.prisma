
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @map("_id")
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
    MALE
    FEMALE
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    joiningDate   DateTime?
    userRole      String?
    project       String?

    PersonalData PersonalData?

    LegaDocuments  LegalDocuments?
    Education      Education[]
    workExperience workExperience[]
    skills         Skills[]

    managedUsers User[]         @relation("Manager")
    managedBy      User?          @relation("Manager", fields: [managedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
    managedById    String?        @db.ObjectId
    accounts     Account[]
    Session      Session[]
    Card         Card[]
    List         List[]
    Manager      Manager?       @relation(fields: [managerId], references: [id])
    managerId    String?        @db.ObjectId
    attendance  Attendance[]
}

model PersonalData {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    fullName    String
    dateOfBirth DateTime
    Gender      Gender
    citizenship String
    User        User     @relation(fields: [userId], references: [id])
    userId      String   @unique @db.ObjectId
}

model LegalDocuments {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    AadharNumber   String?
    licenseNumber  String?
    passportNumber String?
    DocumentType   String?
    expiryDate     DateTime?
    DocumentNumber String?
    User           User    @relation(fields: [userId], references: [id])
    userId         String   @db.ObjectId @unique
}

model Education {
    id              String  @id @default(auto()) @map("_id") @db.ObjectId
    institutionName String
    collegeName     String
    Department      String
    Stream          String
    Location        String
    User            User?   @relation(fields: [userId], references: [id])
    userId          String? @db.ObjectId
}

model workExperience {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    companyName        String
    customerName       String
    ProjectName        String
    ProjectDescription String
    Team               String
    Role               String
    StartPeriod        DateTime
    EndPeriod          DateTime
    User               User?    @relation(fields: [userId], references: [id])
    userId             String?  @db.ObjectId
}

model Skills {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    skill       String
    rating      Int
    companyName String?
    User        User?   @relation(fields: [userId], references: [id])
    userId      String? @db.ObjectId
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Manager {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    lists     List[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users     User[]
}

model List {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    title  String
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])
    order  Int

    managerId String  @db.ObjectId
    manager   Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

    cards Card[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([managerId])
}

model Card {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    order       Int
    description String?
    assignedTo  User    @relation(fields: [userId], references: [id])
    status      String

    listId    String    @db.ObjectId
    list      List      @relation(fields: [listId], references: [id], onDelete: Cascade)
    SubTaks   SubTask[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    userId    String    @db.ObjectId

    @@index([listId])
}

model SubTask {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    title  String
    Card   Card?   @relation(fields: [cardId], references: [id])
    cardId String? @db.ObjectId
}

enum Action {
    CREATE
    UPDATE
    DELETE
}

enum Entity_Type {
    MANAGER
    LIST
    CARD
}

model AuditLog {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    action      Action
    entityId    String
    entityType  Entity_Type
    entityTitle String
    userId      String
    userImage   String
    userName    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Attendance {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId String      @db.ObjectId
  date       DateTime
  status     Boolean
  reason     Reason
  User  User    @relation(fields: [userId], references: [id])

}

enum Reason {
  PaidLeave
  Absent
  Present
}
